name: Update JSON and Generate Markdown on Issue Creation

on:
  issues:
    types: [closed]

jobs:
  update-json:
    runs-on: ubuntu-latest

    concurrency:
      group: update-json
      cancel-in-progress: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        persist-credentials: true

    - name: Check if issue body is valid JSON
      id: check_json
      run: |
        ISSUE_BODY='${{ github.event.issue.body }}'
        if [[ $ISSUE_BODY =~ ^\{ ]]; then
          echo "::set-output name=is_valid_json::true"
        else
          echo "Issue body is not valid JSON. Skipping further steps."
          echo "::set-output name=is_valid_json::false"
        fi

    - name: Set up Python
      if: steps.check_json.outputs.is_valid_json == 'true'
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      if: steps.check_json.outputs.is_valid_json == 'true'
      run: |
        python -m pip install --upgrade pip

    - name: Extract issue content
      if: steps.check_json.outputs.is_valid_json == 'true'
      id: extract_content
      run: |
        echo "::set-output name=name::$(echo '${{ github.event.issue.body }}' | jq -r '.name')"
        echo "::set-output name=institute::$(echo '${{ github.event.issue.body }}' | jq -r '.institute')"
        echo "::set-output name=description::$(echo '${{ github.event.issue.body }}' | jq -r '.description')"
        echo "::set-output name=deadline::$(echo '${{ github.event.issue.body }}' | jq -r '.deadline')"
        echo "::set-output name=website::$(echo '${{ github.event.issue.body }}' | jq -r '.website')"
        echo "::set-output name=tags::$(echo '${{ github.event.issue.body }}' | jq -r '.tags | tojson')"
        echo "::set-output name=target::$(echo '${{ github.event.issue.body }}' | jq -r '.target')"

    - name: Update JSON file
      if: steps.check_json.outputs.is_valid_json == 'true'
      run: |
        python scripts/update_json.py
      env:
        INPUT_NAME: ${{ steps.extract_content.outputs.name }}
        INPUT_INSTITUTE: ${{ steps.extract_content.outputs.institute }}
        INPUT_DESCRIPTION: ${{ steps.extract_content.outputs.description }}
        INPUT_DEADLINE: ${{ steps.extract_content.outputs.deadline }}
        INPUT_WEBSITE: ${{ steps.extract_content.outputs.website }}
        INPUT_TAGS: ${{ steps.extract_content.outputs.tags }}
        INPUT_TARGET: ${{ steps.extract_content.outputs.target }}

    - name: Generate Markdown file
      if: steps.check_json.outputs.is_valid_json == 'true'
      run: |
        python scripts/generate_markdown.py

    - name: Generate Markdown file
      if: steps.check_json.outputs.is_valid_json == 'true'
      run: |
        python scripts/update_readme.py

    - name: Commit and push JSON and Markdown files
      if: steps.check_json.outputs.is_valid_json == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add data.json output.md README.md
        git commit -m "Update data.json and output.md with new issue"
        git push
